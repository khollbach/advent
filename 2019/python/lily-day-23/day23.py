intcode_program_lily = '3,62,1001,62,11,10,109,2243,105,1,0,2072,633,1299,1171,1367,1509,732,602,1843,1969,864,1439,763,2212,794,1540,1641,1233,571,1004,1111,1573,1812,2014,701,895,1474,1402,1932,1076,1711,930,1775,2043,1142,1903,969,1680,1043,1202,2181,823,1744,1610,670,1336,1266,2150,2113,1874,0,0,0,0,0,0,0,0,0,0,0,0,3,64,1008,64,-1,62,1006,62,88,1006,61,170,1105,1,73,3,65,21002,64,1,1,21002,66,1,2,21102,1,105,0,1106,0,436,1201,1,-1,64,1007,64,0,62,1005,62,73,7,64,67,62,1006,62,73,1002,64,2,132,1,132,68,132,1001,0,0,62,1001,132,1,140,8,0,65,63,2,63,62,62,1005,62,73,1002,64,2,161,1,161,68,161,1101,1,0,0,1001,161,1,169,102,1,65,0,1101,1,0,61,1102,1,0,63,7,63,67,62,1006,62,203,1002,63,2,194,1,68,194,194,1006,0,73,1001,63,1,63,1106,0,178,21102,210,1,0,106,0,69,1202,1,1,70,1102,0,1,63,7,63,71,62,1006,62,250,1002,63,2,234,1,72,234,234,4,0,101,1,234,240,4,0,4,70,1001,63,1,63,1105,1,218,1106,0,73,109,4,21101,0,0,-3,21101,0,0,-2,20207,-2,67,-1,1206,-1,293,1202,-2,2,283,101,1,283,283,1,68,283,283,22001,0,-3,-3,21201,-2,1,-2,1105,1,263,22101,0,-3,-3,109,-4,2105,1,0,109,4,21102,1,1,-3,21102,1,0,-2,20207,-2,67,-1,1206,-1,342,1202,-2,2,332,101,1,332,332,1,68,332,332,22002,0,-3,-3,21201,-2,1,-2,1105,1,312,22102,1,-3,-3,109,-4,2106,0,0,109,1,101,1,68,359,20101,0,0,1,101,3,68,367,20102,1,0,2,21102,376,1,0,1105,1,436,22102,1,1,0,109,-1,2105,1,0,1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912,1073741824,2147483648,4294967296,8589934592,17179869184,34359738368,68719476736,137438953472,274877906944,549755813888,1099511627776,2199023255552,4398046511104,8796093022208,17592186044416,35184372088832,70368744177664,140737488355328,281474976710656,562949953421312,1125899906842624,109,8,21202,-6,10,-5,22207,-7,-5,-5,1205,-5,521,21101,0,0,-4,21101,0,0,-3,21102,1,51,-2,21201,-2,-1,-2,1201,-2,385,470,21001,0,0,-1,21202,-3,2,-3,22207,-7,-1,-5,1205,-5,496,21201,-3,1,-3,22102,-1,-1,-5,22201,-7,-5,-7,22207,-3,-6,-5,1205,-5,515,22102,-1,-6,-5,22201,-3,-5,-3,22201,-1,-4,-4,1205,-2,461,1105,1,547,21101,-1,0,-4,21202,-6,-1,-6,21207,-7,0,-5,1205,-5,547,22201,-7,-6,-7,21201,-4,1,-4,1105,1,529,21202,-4,1,-7,109,-8,2105,1,0,109,1,101,1,68,564,20102,1,0,0,109,-1,2106,0,0,1102,1,25253,66,1102,1,1,67,1101,598,0,68,1101,0,556,69,1102,1,1,71,1101,600,0,72,1105,1,73,1,2659,25,83969,1102,30677,1,66,1101,0,1,67,1102,629,1,68,1102,1,556,69,1101,1,0,71,1102,1,631,72,1106,0,73,1,41,32,296644,1102,36251,1,66,1102,4,1,67,1102,1,660,68,1102,1,302,69,1101,0,1,71,1102,668,1,72,1105,1,73,0,0,0,0,0,0,0,0,41,515946,1102,7793,1,66,1102,1,1,67,1102,697,1,68,1102,1,556,69,1102,1,1,71,1101,0,699,72,1105,1,73,1,160,41,171982,1101,11689,0,66,1101,1,0,67,1102,728,1,68,1101,556,0,69,1102,1,1,71,1101,0,730,72,1106,0,73,1,131,2,41183,1101,0,37691,66,1102,1,1,67,1101,759,0,68,1102,1,556,69,1102,1,1,71,1101,761,0,72,1105,1,73,1,1013,4,12759,1102,1,4271,66,1102,1,1,67,1102,790,1,68,1101,556,0,69,1102,1,1,71,1102,792,1,72,1105,1,73,1,293,36,146397,1101,0,56099,66,1102,1,1,67,1102,1,821,68,1101,0,556,69,1101,0,0,71,1102,823,1,72,1106,0,73,1,1953,1101,85991,0,66,1102,1,6,67,1102,850,1,68,1101,0,302,69,1101,1,0,71,1102,862,1,72,1106,0,73,0,0,0,0,0,0,0,0,0,0,0,0,46,62794,1101,53,0,66,1101,0,1,67,1101,891,0,68,1101,0,556,69,1102,1,1,71,1102,893,1,72,1106,0,73,1,-90,26,145358,1102,1,83969,66,1101,0,3,67,1102,922,1,68,1102,1,302,69,1101,1,0,71,1101,0,928,72,1106,0,73,0,0,0,0,0,0,16,260765,1102,1,47363,66,1101,0,1,67,1101,0,957,68,1101,0,556,69,1102,1,5,71,1102,959,1,72,1105,1,73,1,5,19,97159,32,222483,1,72502,1,108753,41,343964,1101,48799,0,66,1102,1,3,67,1102,1,996,68,1102,1,302,69,1101,0,1,71,1102,1002,1,72,1105,1,73,0,0,0,0,0,0,16,52153,1102,97159,1,66,1101,0,5,67,1101,0,1031,68,1102,302,1,69,1102,1,1,71,1102,1,1041,72,1106,0,73,0,0,0,0,0,0,0,0,0,0,28,212001,1101,19889,0,66,1102,2,1,67,1101,1070,0,68,1102,1,302,69,1102,1,1,71,1102,1,1074,72,1105,1,73,0,0,0,0,19,388636,1101,64679,0,66,1101,0,3,67,1101,1103,0,68,1102,302,1,69,1102,1,1,71,1101,0,1109,72,1105,1,73,0,0,0,0,0,0,28,141334,1102,1,34259,66,1101,0,1,67,1101,1138,0,68,1102,1,556,69,1102,1,1,71,1102,1,1140,72,1105,1,73,1,-3,21,32122,1102,64591,1,66,1101,1,0,67,1102,1169,1,68,1101,556,0,69,1101,0,0,71,1102,1,1171,72,1106,0,73,1,1050,1102,1,28751,66,1102,1,1,67,1101,1198,0,68,1102,1,556,69,1101,0,1,71,1101,1200,0,72,1105,1,73,1,3,19,485795,1102,1,12659,66,1101,0,1,67,1101,1229,0,68,1101,0,556,69,1101,1,0,71,1101,1231,0,72,1106,0,73,1,22,27,143571,1102,1,14563,66,1102,1,1,67,1101,0,1260,68,1102,556,1,69,1101,0,2,71,1102,1,1262,72,1105,1,73,1,479,19,194318,26,72679,1102,31397,1,66,1101,0,2,67,1101,0,1293,68,1101,351,0,69,1102,1,1,71,1102,1,1297,72,1105,1,73,0,0,0,0,255,14593,1101,0,41183,66,1101,4,0,67,1101,1326,0,68,1101,0,302,69,1101,1,0,71,1101,1334,0,72,1105,1,73,0,0,0,0,0,0,0,0,16,208612,1101,0,36697,66,1102,1,1,67,1102,1363,1,68,1102,556,1,69,1101,1,0,71,1102,1,1365,72,1106,0,73,1,1721,27,191428,1102,1,4253,66,1102,3,1,67,1102,1,1394,68,1101,302,0,69,1101,0,1,71,1101,1400,0,72,1105,1,73,0,0,0,0,0,0,16,104306,1101,47857,0,66,1101,0,4,67,1102,1429,1,68,1102,302,1,69,1102,1,1,71,1102,1437,1,72,1105,1,73,0,0,0,0,0,0,0,0,15,84314,1101,0,90473,66,1102,3,1,67,1101,1466,0,68,1101,302,0,69,1102,1,1,71,1102,1,1472,72,1105,1,73,0,0,0,0,0,0,28,70667,1101,0,72679,66,1102,3,1,67,1102,1501,1,68,1102,302,1,69,1101,0,1,71,1102,1507,1,72,1106,0,73,0,0,0,0,0,0,29,194037,1101,79777,0,66,1101,0,1,67,1102,1536,1,68,1101,556,0,69,1102,1,1,71,1101,1538,0,72,1105,1,73,1,170,32,148322,1101,0,42157,66,1102,1,2,67,1101,0,1567,68,1102,302,1,69,1101,1,0,71,1102,1,1571,72,1106,0,73,0,0,0,0,28,282668,1101,16061,0,66,1101,0,4,67,1102,1,1600,68,1101,0,302,69,1101,1,0,71,1101,1608,0,72,1105,1,73,0,0,0,0,0,0,0,0,16,156459,1101,36677,0,66,1102,1,1,67,1101,0,1637,68,1101,556,0,69,1101,0,1,71,1101,1639,0,72,1106,0,73,1,-15,25,251907,1102,52153,1,66,1101,5,0,67,1101,1668,0,68,1102,253,1,69,1101,1,0,71,1102,1678,1,72,1106,0,73,0,0,0,0,0,0,0,0,0,0,38,19889,1101,0,9967,66,1101,0,1,67,1101,0,1707,68,1101,556,0,69,1102,1,1,71,1101,0,1709,72,1106,0,73,1,53,2,82366,1102,85453,1,66,1102,1,1,67,1101,1738,0,68,1102,1,556,69,1101,2,0,71,1102,1,1740,72,1106,0,73,1,10,1,36251,41,257973,1102,8081,1,66,1101,1,0,67,1101,1771,0,68,1102,1,556,69,1102,1,1,71,1101,1773,0,72,1105,1,73,1,59,2,164732,1101,0,74161,66,1101,0,4,67,1101,1802,0,68,1102,302,1,69,1101,0,1,71,1101,0,1810,72,1106,0,73,0,0,0,0,0,0,0,0,27,95714,1102,75161,1,66,1101,0,1,67,1101,1839,0,68,1101,0,556,69,1101,1,0,71,1102,1,1841,72,1105,1,73,1,300,38,39778,1102,57367,1,66,1101,1,0,67,1101,1870,0,68,1102,1,556,69,1102,1,1,71,1101,0,1872,72,1105,1,73,1,2707,21,48183,1102,1,92399,66,1101,0,1,67,1102,1,1901,68,1102,556,1,69,1101,0,0,71,1102,1903,1,72,1105,1,73,1,1443,1102,1,33563,66,1102,1,1,67,1101,0,1930,68,1102,1,556,69,1102,0,1,71,1101,1932,0,72,1106,0,73,1,1816,1102,70667,1,66,1101,0,4,67,1101,1959,0,68,1101,0,253,69,1102,1,1,71,1102,1,1967,72,1105,1,73,0,0,0,0,0,0,0,0,46,31397,1102,6991,1,66,1101,1,0,67,1101,1996,0,68,1102,1,556,69,1102,1,8,71,1102,1,1998,72,1106,0,73,1,1,4,8506,21,16061,36,97598,25,167938,2,123549,32,74161,27,47857,26,218037,1102,69877,1,66,1101,0,1,67,1102,1,2041,68,1101,556,0,69,1101,0,0,71,1101,0,2043,72,1105,1,73,1,1786,1102,38183,1,66,1102,1,1,67,1101,0,2070,68,1102,1,556,69,1101,0,0,71,1101,2072,0,72,1106,0,73,1,1710,1102,1,14593,66,1101,0,1,67,1101,2099,0,68,1102,556,1,69,1101,6,0,71,1102,2101,1,72,1106,0,73,1,20592,15,42157,29,64679,29,129358,11,90473,11,180946,11,271419,1102,29753,1,66,1102,1,1,67,1101,2140,0,68,1101,0,556,69,1101,0,4,71,1101,0,2142,72,1106,0,73,1,2,21,64244,19,291477,41,85991,41,429955,1102,10979,1,66,1101,1,0,67,1102,2177,1,68,1101,556,0,69,1102,1,1,71,1102,2179,1,72,1106,0,73,1,-17,4,4253,1102,1,22573,66,1102,1,1,67,1102,2208,1,68,1102,1,556,69,1102,1,1,71,1101,0,2210,72,1106,0,73,1,-84,36,48799,1102,1,82051,66,1101,1,0,67,1102,1,2239,68,1102,1,556,69,1101,1,0,71,1102,1,2241,72,1106,0,73,1,125,1,145004\n'

intcode_program = '3,62,1001,62,11,10,109,2237,105,1,0,919,1344,1032,2175,1730,1573,882,1439,1901,773,1866,1761,606,1544,2039,1313,1185,2206,1156,1251,2109,1932,1127,1220,1001,851,2006,1608,814,571,960,1509,1377,1833,639,1798,2078,1975,728,1094,1410,699,1670,670,1699,1639,1476,1284,2140,1065,0,0,0,0,0,0,0,0,0,0,0,0,3,64,1008,64,-1,62,1006,62,88,1006,61,170,1105,1,73,3,65,21002,64,1,1,20101,0,66,2,21102,105,1,0,1105,1,436,1201,1,-1,64,1007,64,0,62,1005,62,73,7,64,67,62,1006,62,73,1002,64,2,132,1,132,68,132,1001,0,0,62,1001,132,1,140,8,0,65,63,2,63,62,62,1005,62,73,1002,64,2,161,1,161,68,161,1102,1,1,0,1001,161,1,169,1002,65,1,0,1102,1,1,61,1101,0,0,63,7,63,67,62,1006,62,203,1002,63,2,194,1,68,194,194,1006,0,73,1001,63,1,63,1106,0,178,21101,0,210,0,105,1,69,1202,1,1,70,1101,0,0,63,7,63,71,62,1006,62,250,1002,63,2,234,1,72,234,234,4,0,101,1,234,240,4,0,4,70,1001,63,1,63,1105,1,218,1106,0,73,109,4,21102,1,0,-3,21101,0,0,-2,20207,-2,67,-1,1206,-1,293,1202,-2,2,283,101,1,283,283,1,68,283,283,22001,0,-3,-3,21201,-2,1,-2,1105,1,263,21201,-3,0,-3,109,-4,2106,0,0,109,4,21102,1,1,-3,21102,0,1,-2,20207,-2,67,-1,1206,-1,342,1202,-2,2,332,101,1,332,332,1,68,332,332,22002,0,-3,-3,21201,-2,1,-2,1105,1,312,22102,1,-3,-3,109,-4,2105,1,0,109,1,101,1,68,359,20102,1,0,1,101,3,68,367,20101,0,0,2,21102,376,1,0,1105,1,436,21202,1,1,0,109,-1,2106,0,0,1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912,1073741824,2147483648,4294967296,8589934592,17179869184,34359738368,68719476736,137438953472,274877906944,549755813888,1099511627776,2199023255552,4398046511104,8796093022208,17592186044416,35184372088832,70368744177664,140737488355328,281474976710656,562949953421312,1125899906842624,109,8,21202,-6,10,-5,22207,-7,-5,-5,1205,-5,521,21102,1,0,-4,21102,1,0,-3,21102,1,51,-2,21201,-2,-1,-2,1201,-2,385,471,20101,0,0,-1,21202,-3,2,-3,22207,-7,-1,-5,1205,-5,496,21201,-3,1,-3,22102,-1,-1,-5,22201,-7,-5,-7,22207,-3,-6,-5,1205,-5,515,22102,-1,-6,-5,22201,-3,-5,-3,22201,-1,-4,-4,1205,-2,461,1105,1,547,21101,-1,0,-4,21202,-6,-1,-6,21207,-7,0,-5,1205,-5,547,22201,-7,-6,-7,21201,-4,1,-4,1106,0,529,22101,0,-4,-7,109,-8,2105,1,0,109,1,101,1,68,564,20102,1,0,0,109,-1,2105,1,0,1101,18191,0,66,1102,1,3,67,1102,598,1,68,1101,0,253,69,1101,0,1,71,1102,1,604,72,1105,1,73,0,0,0,0,0,0,39,124114,1102,1,35267,66,1101,0,2,67,1101,0,633,68,1102,1,302,69,1101,0,1,71,1102,637,1,72,1106,0,73,0,0,0,0,2,89942,1102,78877,1,66,1102,1,1,67,1102,666,1,68,1101,556,0,69,1102,1,1,71,1101,668,0,72,1106,0,73,1,59,21,465199,1101,42793,0,66,1102,1,1,67,1101,0,697,68,1101,556,0,69,1101,0,0,71,1102,1,699,72,1106,0,73,1,1963,1101,0,7393,66,1102,1,1,67,1102,726,1,68,1102,1,556,69,1101,0,0,71,1101,728,0,72,1105,1,73,1,1141,1102,28081,1,66,1102,1,1,67,1102,755,1,68,1101,0,556,69,1101,8,0,71,1101,0,757,72,1106,0,73,1,1,12,70534,2,44971,1,156158,33,35983,5,167001,6,1471,11,188644,14,28463,1101,0,9059,66,1102,1,1,67,1102,1,800,68,1101,556,0,69,1101,0,6,71,1102,1,802,72,1106,0,73,1,2,21,398742,39,62057,48,179373,14,142315,30,98387,30,196774,1101,45869,0,66,1102,1,4,67,1101,0,841,68,1102,1,302,69,1101,1,0,71,1101,0,849,72,1106,0,73,0,0,0,0,0,0,0,0,30,491935,1101,4759,0,66,1102,1,1,67,1101,0,878,68,1102,1,556,69,1101,1,0,71,1102,880,1,72,1106,0,73,1,14,5,111334,1101,1471,0,66,1101,4,0,67,1101,0,909,68,1102,302,1,69,1102,1,1,71,1101,917,0,72,1105,1,73,0,0,0,0,0,0,0,0,29,54573,1101,26293,0,66,1102,1,1,67,1101,946,0,68,1102,556,1,69,1101,0,6,71,1101,948,0,72,1106,0,73,1,20183,26,82487,10,172138,10,258207,31,20857,31,41714,31,62571,1101,98387,0,66,1101,0,6,67,1102,987,1,68,1101,0,302,69,1102,1,1,71,1101,999,0,72,1105,1,73,0,0,0,0,0,0,0,0,0,0,0,0,32,89158,1101,89071,0,66,1101,0,1,67,1102,1028,1,68,1102,556,1,69,1101,1,0,71,1102,1030,1,72,1105,1,73,1,18947,12,35267,1101,0,44971,66,1102,2,1,67,1101,0,1059,68,1101,302,0,69,1102,1,1,71,1101,0,1063,72,1105,1,73,0,0,0,0,1,78079,1101,79379,0,66,1102,1,1,67,1101,1092,0,68,1101,556,0,69,1101,0,0,71,1102,1,1094,72,1105,1,73,1,1917,1101,62057,0,66,1101,0,2,67,1102,1,1121,68,1101,0,302,69,1101,0,1,71,1102,1,1125,72,1105,1,73,0,0,0,0,48,59791,1101,0,10289,66,1101,0,1,67,1101,1154,0,68,1101,556,0,69,1102,1,0,71,1101,0,1156,72,1105,1,73,1,1630,1101,0,51893,66,1102,1,1,67,1102,1183,1,68,1102,1,556,69,1101,0,0,71,1101,1185,0,72,1106,0,73,1,1144,1101,0,72859,66,1101,0,1,67,1101,0,1212,68,1102,1,556,69,1101,0,3,71,1101,1214,0,72,1106,0,73,1,5,28,91738,28,137607,30,393548,1102,1,12983,66,1101,0,1,67,1102,1,1247,68,1102,556,1,69,1102,1,1,71,1102,1249,1,72,1105,1,73,1,79,11,94322,1102,1,102059,66,1101,0,1,67,1101,1278,0,68,1102,1,556,69,1101,2,0,71,1102,1280,1,72,1106,0,73,1,13,21,199371,14,85389,1102,1,33469,66,1101,1,0,67,1101,0,1311,68,1101,556,0,69,1102,1,0,71,1101,1313,0,72,1105,1,73,1,1521,1101,10399,0,66,1101,1,0,67,1102,1,1340,68,1102,556,1,69,1101,0,1,71,1102,1342,1,72,1106,0,73,1,-177,14,56926,1102,78079,1,66,1102,1,2,67,1102,1,1371,68,1102,302,1,69,1102,1,1,71,1101,1375,0,72,1105,1,73,0,0,0,0,33,71966,1102,44579,1,66,1102,1,2,67,1101,0,1404,68,1102,351,1,69,1101,1,0,71,1102,1408,1,72,1105,1,73,0,0,0,0,255,26293,1102,96469,1,66,1102,1,1,67,1102,1,1437,68,1101,556,0,69,1102,0,1,71,1102,1439,1,72,1106,0,73,1,1517,1102,30851,1,66,1101,0,4,67,1101,1466,0,68,1102,253,1,69,1102,1,1,71,1102,1474,1,72,1106,0,73,0,0,0,0,0,0,0,0,32,44579,1101,89387,0,66,1102,1,1,67,1102,1503,1,68,1101,556,0,69,1102,1,2,71,1101,0,1505,72,1106,0,73,1,10,28,45869,30,295161,1102,1,20857,66,1102,1,3,67,1101,1536,0,68,1101,0,302,69,1102,1,1,71,1102,1542,1,72,1105,1,73,0,0,0,0,0,0,7,61702,1102,84481,1,66,1101,0,1,67,1101,0,1571,68,1102,1,556,69,1102,1,0,71,1101,0,1573,72,1106,0,73,1,1220,1102,55667,1,66,1102,1,3,67,1101,0,1600,68,1102,302,1,69,1101,1,0,71,1102,1606,1,72,1105,1,73,0,0,0,0,0,0,29,18191,1102,997,1,66,1101,1,0,67,1101,0,1635,68,1102,1,556,69,1101,1,0,71,1102,1,1637,72,1106,0,73,1,5068,11,141483,1102,1,73061,66,1102,1,1,67,1101,0,1666,68,1102,556,1,69,1101,0,1,71,1102,1668,1,72,1105,1,73,1,68,11,47161,1102,1,73259,66,1102,1,1,67,1102,1,1697,68,1101,0,556,69,1102,0,1,71,1101,0,1699,72,1105,1,73,1,1939,1101,29059,0,66,1101,0,1,67,1101,0,1726,68,1101,556,0,69,1101,0,1,71,1102,1728,1,72,1106,0,73,1,160,30,590322,1101,0,36161,66,1101,1,0,67,1102,1757,1,68,1101,0,556,69,1101,1,0,71,1101,0,1759,72,1106,0,73,1,283,6,5884,1102,47161,1,66,1101,0,4,67,1102,1788,1,68,1101,302,0,69,1102,1,1,71,1101,1796,0,72,1105,1,73,0,0,0,0,0,0,0,0,29,36382,1101,86197,0,66,1102,1,1,67,1101,1825,0,68,1101,0,556,69,1101,3,0,71,1101,1827,0,72,1105,1,73,1,7,21,66457,48,119582,14,113852,1102,1,35983,66,1101,2,0,67,1102,1860,1,68,1101,0,302,69,1102,1,1,71,1101,1864,0,72,1105,1,73,0,0,0,0,21,265828,1101,0,86069,66,1102,3,1,67,1101,0,1893,68,1101,302,0,69,1102,1,1,71,1102,1,1899,72,1105,1,73,0,0,0,0,0,0,7,123404,1102,1,27691,66,1102,1,1,67,1101,0,1928,68,1102,1,556,69,1102,1,1,71,1102,1,1930,72,1105,1,73,1,8363,5,55667,1101,66457,0,66,1102,7,1,67,1101,0,1959,68,1102,302,1,69,1102,1,1,71,1101,1973,0,72,1105,1,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,30851,1102,1,6991,66,1101,0,1,67,1101,2002,0,68,1102,1,556,69,1102,1,1,71,1101,2004,0,72,1106,0,73,1,125,28,183476,1101,0,82487,66,1101,0,2,67,1102,2033,1,68,1101,0,302,69,1102,1,1,71,1102,2037,1,72,1106,0,73,0,0,0,0,7,92553,1101,0,28463,66,1101,5,0,67,1101,2066,0,68,1101,0,302,69,1101,0,1,71,1102,1,2076,72,1106,0,73,0,0,0,0,0,0,0,0,0,0,10,86069,1101,91771,0,66,1101,1,0,67,1101,0,2105,68,1101,556,0,69,1102,1,1,71,1101,2107,0,72,1106,0,73,1,2437,21,332285,1101,103969,0,66,1102,1,1,67,1101,0,2136,68,1102,556,1,69,1102,1,1,71,1102,1,2138,72,1105,1,73,1,17,6,2942,1101,0,59791,66,1101,3,0,67,1101,2167,0,68,1101,0,302,69,1102,1,1,71,1101,0,2173,72,1105,1,73,0,0,0,0,0,0,26,164974,1102,1,18859,66,1101,1,0,67,1101,2202,0,68,1102,556,1,69,1101,1,0,71,1101,2204,0,72,1106,0,73,1,2081,6,4413,1101,0,84179,66,1102,1,1,67,1102,1,2233,68,1102,556,1,69,1101,1,0,71,1102,1,2235,72,1106,0,73,1,4,21,132914\n'

# --------------------------------------------

from typing import List, Iterable, Optional, Callable, Generator, Union
from collections import namedtuple
from typing import overload

Instruction = namedtuple("Instruction", "opcode, param_types")

class _Instr:
    ADD = Instruction(1, "rrw")
    MUL = Instruction(2, "rrw")
    INPUT = Instruction(3, "w")
    OUTPUT = Instruction(4, "r")
    JUMP_IF_TRUE = Instruction(5, "rr")
    JUMP_IF_FALSE = Instruction(6, "rr")
    LT = Instruction(7, "rrw")
    EQ = Instruction(8, "rrw")
    ADJUST_RB = Instruction(9, "r")
    HALT = Instruction(99, "")

class _ProgramHalt(Exception):
    """Raised when a halt instruction executes."""
    pass


class IntcodeComputer:
    """An interpreter for Intcode programs."""

    def __init__(self, program: Iterable[int]) -> None:
        """
        Create a new IntcodeComputer for running the given program.

        The program can be run multiple times using the same IntcodeComputer.
        """
        self._original_program: List[int] = list(program)
        self._mem: _Memory
        self._pc: int
        self._relative_base: int

    def run(
        self,
        noun: Optional[int] = None,
        verb: Optional[int] = None,
        get_input_fn: Optional[Callable[[], int]] = None,
        send_output_fn: Optional[Callable[[int], None]] = None,
    ) -> int:
        """
        Initialize memory, and reset the program counter and the relative base;
        then run the program to completion.

        This method optionally accepts a noun and a verb, which (if specified)
        are copied to memory addresses 1 and 2 respectively before running. The
        value returned is whatever is in memory address 0 upon program halt.

        Input and output are performed via the given functions (or stdin/stdout
        if unspecified).
        """
        self._mem = _Memory(self._original_program)
        self._pc = 0
        self._relative_base = 0

        if noun is not None:
            self._mem[1] = noun
        if verb is not None:
            self._mem[2] = verb

        # Default to stdio
        def get_input() -> int:
            return int(input("> "))
        def send_output(val: int) -> None:
            print(val)
        get_input_fn = get_input_fn or get_input
        send_output_fn = send_output_fn or send_output

        # Run until halted.
        try:
            while True:
                self._step(get_input_fn, send_output_fn)
        except _ProgramHalt:
            pass

        return self._mem[0]

    def _step(
        self,
        get_input_fn: Callable[[], int],
        send_output_fn: Callable[[int], None],
    ) -> None:
        """
        Execute one instruction and update the program counter.
        Throw _ProgramHalt if it was a halt instruction.
        """
        opcode = self._mem[self._pc] % 100  # Two right-most digits.
        param_modes = self._mem[self._pc] // 100  # Leading digits.

        if opcode == _Instr.HALT.opcode:
            # mypy won't let me do this ...
            () = self._consume_args(_Instr.HALT, param_modes)  # type: ignore
            raise _ProgramHalt
        elif opcode == _Instr.ADD.opcode:
            val1, val2, target_pos = self._consume_args(_Instr.ADD, param_modes)
            self._mem[target_pos] = val1 + val2
        elif opcode == _Instr.MUL.opcode:
            val1, val2, target_pos = self._consume_args(_Instr.MUL, param_modes)
            self._mem[target_pos] = val1 * val2
        elif opcode == _Instr.INPUT.opcode:
            target_pos, = self._consume_args(_Instr.INPUT, param_modes)
            self._mem[target_pos] = get_input_fn()
        elif opcode == _Instr.OUTPUT.opcode:
            val, = self._consume_args(_Instr.OUTPUT, param_modes)
            send_output_fn(val)
        elif opcode == _Instr.JUMP_IF_TRUE.opcode:
            condition, target_instr = self._consume_args(_Instr.JUMP_IF_TRUE, param_modes)
            if condition != 0:
                self._pc = target_instr
        elif opcode == _Instr.JUMP_IF_FALSE.opcode:
            condition, target_instr = self._consume_args(_Instr.JUMP_IF_FALSE, param_modes)
            if condition == 0:
                self._pc = target_instr
        elif opcode == _Instr.LT.opcode:
            val1, val2, target_pos = self._consume_args(_Instr.LT, param_modes)
            self._mem[target_pos] = int(val1 < val2)
        elif opcode == _Instr.EQ.opcode:
            val1, val2, target_pos = self._consume_args(_Instr.EQ, param_modes)
            self._mem[target_pos] = int(val1 == val2)
        elif opcode == _Instr.ADJUST_RB.opcode:
            val, = self._consume_args(_Instr.ADJUST_RB, param_modes)
            self._relative_base += val
        else:
            print("Unexpected opcode:", opcode)
            assert False

    def _consume_args(
        self,
        instruction: Instruction,
        param_mode_flags: int,
    ) -> List[int]:
        """
        Consume the instruction's parameters; deferencing as necessary
        according to the parameter mode flags (as described in the spec, in
        *REVERSE* order).

        Update the program counter accordingly, to point to the beginning of
        the next instruction.
        """
        # Consume params; some may be dereferenced before returning, depending
        # on param_mode_flags. (Update the program counter!)
        num_params = len(instruction.param_types)
        params = self._mem[self._pc + 1 : self._pc + 1 + num_params]
        self._pc += 1 + num_params

        vals = []

        # Handle param_mode_flags.
        for param_type, param in zip(instruction.param_types, params):
            mode = param_mode_flags % 10
            param_mode_flags //= 10

            # Immediate mode
            if mode == 1:
                assert param_type != "w"
                val = param

            # Position mode / relative mode
            else:
                assert mode in (0, 2)

                # In relative mode, the address is relative to the r.b.
                base = self._relative_base if mode == 2 else 0

                # Read-params are dereferenced; write params are not.
                if param_type == "r":
                    val = self._mem[base + param]
                else:
                    assert param_type == "w"
                    val = base + param

            vals.append(val)

        assert param_mode_flags == 0
        return vals

class _Memory(list):
    """
    List[int] wrapper that extends and fills with zeros as neccessary.

    This simulates an "infinite" list, all initialized to zero. I.e.,
    infinite memory.
    """

    def __init__(self, program: Iterable[int]) -> None:
        super().__init__(program)

    def _extend(self, newlen: int) -> None:
        """Entend memory to be at least this long by padding with zeros."""
        diff = newlen - len(self)
        if diff > 0:
            self.extend([0] * diff)

    @overload
    def __getitem__(self, address: int) -> int: ...
    @overload
    def __getitem__(self, address: slice) -> List[int]: ...
    def __getitem__(self, address):
        if isinstance(address, int):
            assert address >= 0
            self._extend(address + 1)
            return super().__getitem__(address)
        else:
            # I'll implement the general case if/when the time comes...
            assert address.step is None or address.step > 0
            self._extend(address.stop)
            return super().__getitem__(address)

    @overload
    def __setitem__(self, i: int, o: int) -> None: ...
    @overload
    def __setitem__(self, s: slice, o: Iterable[int]) -> None: ...
    def __setitem__(self, address, value) -> None:
        assert isinstance(address, int)
        assert address >= 0
        self._extend(address + 1)
        super().__setitem__(address, value)

# --------------------------------------------

#from intcode_computer import IntcodeComputer

from typing import List
from queue import Queue
from threading import Thread
import sys, fileinput, queue, time

class NIC:
    def __init__(self, pid: int, msg_buffers: List[Queue], nat_buffer: Queue):
        self._pid = pid
        self._msg_buffers = msg_buffers
        self._nat_buffer = nat_buffer

        # For getting inputs
        self._first_input = True
        self._Y: Optional[int] = None

        # For sending outputs
        self._partial_msg = []

    def get(self) -> int:
        # Give the cpu its pid.
        if self._first_input:
            self._first_input = False
            return self._pid

        # Yield the second half of a half-eaten msg.
        if self._Y is not None:
            Y = self._Y
            self._Y = None
            return Y

        try:
            pair = self._msg_buffers[self._pid].get_nowait()
            print(f"get {self._pid}", pair)
        except queue.Empty:
            #print('(empty)')
            time.sleep(0.1)
            return -1

        # Save the rest for later.
        X, Y = pair
        self._Y = Y
        return X

    def put(self, val: int) -> None:
        self._partial_msg.append(val)

        if len(self._partial_msg) == 3:
            target_pid, X, Y = self._partial_msg
            if target_pid < 0 or target_pid >= 50:
                assert target_pid == 255
                print(f"\t==> Sending to NAT {self._pid} {(X, Y)}")
                ##assert False  # Crash intentionally.
                #sys.exit()
                self._nat_buffer.put((X, Y))
            else:
                print(f"put {self._pid}", (target_pid, X, Y))
                self._msg_buffers[target_pid].put((X, Y))
                self._partial_msg = []

class NAT:
    def __init__(self, msg_buffers: List[Queue]):
        self._msg_buffers = msg_buffers
        self.incoming = Queue()
        self._sent_msgs: List[int] = []  # Y values.

    def _system_resume(self) -> None:
        assert self.incoming.qsize() > 0

        # Clear the queue, and get the most recent message.
        X, Y = (None, None)
        try:
            while True:
                X, Y = self.incoming.get_nowait()
        except queue.Empty:
            pass
        assert X is not None and Y is not None

        if self._sent_msgs and self._sent_msgs[-1] == Y:
            print(Y)
            #sys.sleep(1)
            sys.exit()
            assert False
        self._sent_msgs.append(Y)

        print(f'\t==> NAT to 0 {(X, Y)}')
        self._msg_buffers[0].put((X, Y))

    def _system_idle(self) -> bool:
        '''Snapshot the system and check if it is idle.

        Currently implemented naively with a collect, to see if
        all the message buffers are empty. Not actually atomic!
        Also doesn't check the states of the cpus to see if any
        are about to send something; just reads the message buffers.
        '''
        for i, q in enumerate(self._msg_buffers):
            if q.qsize() > 0:
                return False
        return True

    def run(self) -> None:
        while True:
            time.sleep(2)
            if self._system_idle():
                self._system_resume()

def main():
    #input_str = next(iter(fileinput.input()))
    input_str = intcode_program
    program = list(map(int, input_str.split(",")))

    num_cpus = 50

    # queues[i] is a message buffer for the inputs to cpu i
    queues = [Queue() for i in range(num_cpus)]
    nat = NAT(queues)
    nics = [NIC(i, queues, nat.incoming) for i in range(num_cpus)]

    # Function to be run by each thread (one thread per cpu).
    def run_cpu(pid: int) -> None:
        IntcodeComputer(program).run(
                get_input_fn=nics[pid].get,
                send_output_fn=nics[pid].put)

    # Run all the threads concurrently.
    threads = []
    for i in range(num_cpus):
        t = Thread(target=run_cpu, args=(i,))
        t.start()
        threads.append(t)

    nat.run()

    for t in threads:
        t.join()

if __name__ == "__main__":
    main()

'''
:imap jk <C-c>[ENTER]
'''
